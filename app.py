import streamlit as st
import pandas as pd
import numpy as np
import plotly.express as px
import plotly.graph_objects as go
from plotly.subplots import make_subplots
from algorithm import DiscretizationAlgorithms, get_algorithm_info
import inspect
# C·∫•u h√¨nh trang
st.set_page_config(
    page_title="Discretization & Binning Demo",
    page_icon="üìä",
    layout="wide"
)

# CSS t√πy ch·ªânh
st.markdown("""
<style>
    .main-header {
        font-size: 2.5rem;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .algorithm-card {
        background-color: #f0f2f6;
        padding: 1rem;
        border-radius: 0.5rem;
        margin: 0.5rem 0;
    }
    .code-block {
        background-color: #f8f9fa;
        border: 1px solid #e9ecef;
        border-radius: 0.25rem;
        padding: 1rem;
        font-family: 'Courier New', monospace;
    }
</style>
""", unsafe_allow_html=True)

def main():
    # Header
    st.markdown('<h1 class="main-header">üìäüìä Discretization & Binning Demo</h1>', unsafe_allow_html=True)
    
    # Sidebar
    st.sidebar.title("üéõÔ∏è C√†i ƒë·∫∑t")
    
    # Upload file
    uploaded_file = st.sidebar.file_uploader(
        "üìÅ Ch·ªçn file CSV",
        type=['csv'],
        help="Upload file CSV ch·ª©a d·ªØ li·ªáu numerical"
    )
    
    if uploaded_file is not None:
        try:
            # ƒê·ªçc d·ªØ li·ªáu
            df = pd.read_csv(uploaded_file)
            st.sidebar.success(f"‚úÖ ƒê√£ t·∫£i {len(df)} d√≤ng d·ªØ li·ªáu")
            
            # Ch·ªçn c·ªôt numerical
            numerical_columns = df.select_dtypes(include=[np.number]).columns.tolist()
            
            if numerical_columns:
                selected_column = st.sidebar.selectbox(
                    "ÔøΩÔøΩ Ch·ªçn c·ªôt numerical",
                    numerical_columns,
                    help="Ch·ªçn c·ªôt ch·ª©a d·ªØ li·ªáu s·ªë ƒë·ªÉ th·ª±c hi·ªán discretization"
                )
                
                # Hi·ªÉn th·ªã th√¥ng tin c·ªôt
                col_data = df[selected_column].dropna()
                st.sidebar.info(f"""
                **Th√¥ng tin c·ªôt {selected_column}:**
                - S·ªë l∆∞·ª£ng: {len(col_data)}
                - Min: {col_data.min():.2f}
                - Max: {col_data.max():.2f}
                - Mean: {col_data.mean():.2f}
                - Std: {col_data.std():.2f}
                """)
                
                # V·∫Ω bi·ªÉu ƒë·ªì histogram v√† KDE
                st.subheader("üìä Ph√¢n t√≠ch d·ªØ li·ªáu g·ªëc")
                
                fig = make_subplots(
                    rows=1, cols=2,
                    subplot_titles=('Histogram', 'Box Plot'),
                    specs=[[{"type": "histogram"}, {"type": "box"}]]
                )
                
                # Histogram
                fig.add_trace(
                    go.Histogram(x=col_data, nbinsx=30, name="Histogram", marker_color='#2f9e44'),
                    row=1, col=1
                )
                
                # Box Plot
                fig.add_trace(
                    go.Box(y=col_data, name="Box Plot", marker_color='#2f9e44'),
                    row=1, col=2
                )
                
                fig.update_layout(height=400, showlegend=False)
                st.plotly_chart(fig, use_container_width=True)
                
                # Ch·ªçn thu·∫≠t to√°n
                st.subheader("üîß Ch·ªçn thu·∫≠t to√°n Discretization")
                
                algo_display_names = {
                    "Equal Width Binning": "equal_width_binning",
                    "Equal Frequency Binning": "equal_frequency_binning",
                    "KMeans Binning": "kmeans_binning",
                    "Jenks Natural Breaks": "jenks_natural_breaks",
                    "Standard Deviation Binning": "standard_deviation_binning"
}
                selected_algorithm = st.selectbox(
                    "Ch·ªçn thu·∫≠t to√°n:",
                    list(algo_display_names.keys()),
                    help="Ch·ªçn thu·∫≠t to√°n discretization b·∫°n mu·ªën √°p d·ª•ng"
                )
                algorithms_info = get_algorithm_info()
                if selected_algorithm:
                    # Hi·ªÉn th·ªã th√¥ng tin thu·∫≠t to√°n
                    method_name = algo_display_names[selected_algorithm]
                    print(method_name)
                    selected_func = getattr(DiscretizationAlgorithms, method_name)
                    print(selected_func)
                    print(algorithms_info[selected_algorithm]['description'])
                    st.markdown(f"""
                    <div class="algorithm-card">
                        <h4>{selected_algorithm}</h4>
                        <p>{algorithms_info[selected_algorithm]['description']}</p>
                    </div>
                    """, unsafe_allow_html=True)
                    print('abc')
                    source_code = inspect.getsource(selected_func)
                    with st.expander("üë®‚Äçüíª Xem code thu·∫≠t to√°n"):
                        st.code(source_code, language='python')
                    
                    # Hi·ªÉn th·ªã parameters
                    st.subheader("‚öôÔ∏è Tham s·ªë thu·∫≠t to√°n")
                    algo_info = algorithms_info[selected_algorithm]
                    params = {}
                    col1, col2 = st.columns(2)
                    with col1:
                        for param_name, param_info in algo_info['parameters'].items():
                            if param_info['type'] == 'int':
                                params[param_name] = st.number_input(
                                    f"{param_info['description']} ({param_name})",
                                    min_value=param_info['min'],
                                    max_value=param_info['max'],
                                    value=param_info['default'],
                                    help=f"Ch·ªçn gi√° tr·ªã cho {param_name}"
                                )
                    
                    # N√∫t Apply
                    if st.button("üöÄ √Åp d·ª•ng thu·∫≠t to√°n", type="primary"):
                        with st.spinner("ƒêang x·ª≠ l√Ω..."):
                            # √Åp d·ª•ng thu·∫≠t to√°n
                            discretized_data = apply_algorithm(
                                selected_algorithm, col_data, params
                            )
                            
                            # Hi·ªÉn th·ªã k·∫øt qu·∫£
                            st.subheader("‚úÖ K·∫øt qu·∫£ Discretization")
                            
                            # T·∫°o DataFrame k·∫øt qu·∫£
                            result_df = pd.DataFrame({
                                'Original': col_data,
                                'Discretized': discretized_data
                            })
                            
                            # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
                            st.dataframe(result_df.head(20), use_container_width=True)
                            
                            # Th·ªëng k√™ bin
                            bin_counts = pd.Series(discretized_data).value_counts()
                            bin_counts = bin_counts.sort_index(key=lambda x: x.str.split('_').str[1].astype(int))
                            st.write("**Ph√¢n b·ªë c√°c bin:**")
                            fig_bar = go.Figure(data=[go.Bar(x=bin_counts.index, y=bin_counts, marker_color='#2f9e44')])
                            fig_bar.update_layout(xaxis_title='Bins', yaxis_title='S·ªë l∆∞·ª£ng', title='Ph√¢n b·ªë c√°c bin')
                            st.plotly_chart(fig_bar, use_container_width=True)
                            
                            # V·∫Ω bi·ªÉu ƒë·ªì so s√°nh
                            st.subheader("üìà So s√°nh tr∆∞·ªõc v√† sau discretization")
                            
                            fig_compare = make_subplots(
                                rows=1, cols=2,
                                subplot_titles=('D·ªØ li·ªáu g·ªëc', 'D·ªØ li·ªáu sau discretization'),
                                specs=[[{"type": "histogram"}, {"type": "histogram"}]]
                            )
                            
                            # Histogram d·ªØ li·ªáu g·ªëc
                            fig_compare.add_trace(
                                go.Histogram(x=col_data, nbinsx=30, name="Original", marker_color='#2f9e44'),
                                row=1, col=1
                            )
                            
                            # Histogram d·ªØ li·ªáu discretized
                            bin_labels = sorted(set(discretized_data), key=lambda x: int(x.split('_')[1]))
                            discretized_data = pd.Categorical(discretized_data, categories=bin_labels, ordered=True)

                            fig_compare.add_trace(
                                go.Histogram(x=discretized_data, name="Discretized", marker_color='#2f9e44'),
                                row=1, col=2
                            )
                            
                            fig_compare.update_layout(height=400, showlegend=False)
                            st.plotly_chart(fig_compare, use_container_width=True)
                            
                            # Download k·∫øt qu·∫£
                            csv = result_df.to_csv(index=False)
                            st.download_button(
                                label="üì• T·∫£i xu·ªëng k·∫øt qu·∫£ CSV",
                                data=csv,
                                file_name=f"discretized_{selected_column}.csv",
                                mime="text/csv"
                            )
            else:
                st.error("‚ùå Kh√¥ng t√¨m th·∫•y c·ªôt numerical trong file!")
                
        except Exception as e:
            st.error(f"‚ùå L·ªói khi ƒë·ªçc file: {str(e)}")
    else:
        # H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        st.info("""
        üëã **Ch√†o m·ª´ng ƒë·∫øn v·ªõi Discretization & Binning Demo!**
        
        **C√°ch s·ª≠ d·ª•ng:**
        1. ÔøΩÔøΩ Upload file CSV ch·ª©a d·ªØ li·ªáu numerical
        2. ÔøΩÔøΩ Ch·ªçn c·ªôt numerical b·∫°n mu·ªën discretize
        3. üîß Ch·ªçn thu·∫≠t to√°n discretization
        4. ‚öôÔ∏è ƒêi·ªÅu ch·ªânh tham s·ªë (n·∫øu c√≥)
        5. üöÄ Nh·∫•n "√Åp d·ª•ng thu·∫≠t to√°n" ƒë·ªÉ xem k·∫øt qu·∫£
        
        **C√°c thu·∫≠t to√°n c√≥ s·∫µn:**
        - **Equal Width Binning**: Chia d·ªØ li·ªáu th√†nh c√°c bin c√≥ ƒë·ªô r·ªông b·∫±ng nhau
        - **Equal Frequency Binning**: Chia d·ªØ li·ªáu th√†nh c√°c bin c√≥ s·ªë l∆∞·ª£ng ph·∫ßn t·ª≠ b·∫±ng nhau
        - **K-Means Binning**: S·ª≠ d·ª•ng K-Means clustering ƒë·ªÉ t·∫°o c√°c bin
        - **Jenks Natural Breaks**: T√¨m c√°c ƒëi·ªÉm break t·ª± nhi√™n trong d·ªØ li·ªáu
        - **Standard Deviation Binning**: Chia d·ªØ li·ªáu d·ª±a tr√™n ƒë·ªô l·ªách chu·∫©n
        """)
        
        # T·∫°o d·ªØ li·ªáu m·∫´u
        st.subheader("üìä D·ªØ li·ªáu m·∫´u ƒë·ªÉ test")
        sample_data = np.random.normal(100, 15, 1000)
        sample_df = pd.DataFrame({
            'Age': sample_data,
            'Salary': np.random.normal(50000, 10000, 1000),
            'Score': np.random.uniform(0, 100, 1000)
        })
        
        st.dataframe(sample_df.head(10), use_container_width=True)
        
        # Download d·ªØ li·ªáu m·∫´u
        csv_sample = sample_df.to_csv(index=False)
        st.download_button(
            label="üì• T·∫£i xu·ªëng d·ªØ li·ªáu m·∫´u",
            data=csv_sample,
            file_name="sample_data.csv",
            mime="text/csv"
        )

def apply_algorithm(algorithm_name, data, params):
    """
    √Åp d·ª•ng thu·∫≠t to√°n discretization ƒë∆∞·ª£c ch·ªçn
    """
    algo = DiscretizationAlgorithms()
    
    if algorithm_name == "Equal Width Binning":
        discretized, _, _ = algo.equal_width_binning(data, params['n_bins'])
    elif algorithm_name == "Equal Frequency Binning":
        discretized, _ = algo.equal_frequency_binning(data, params['n_bins'])
    elif algorithm_name == "K-Means Binning":
        discretized, _ = algo.kmeans_binning(data, params['n_bins'])
    elif algorithm_name == "Jenks Natural Breaks":
        discretized, _ = algo.jenks_natural_breaks(data, params['n_bins'])
    elif algorithm_name == "Standard Deviation Binning":
        discretized, _ = algo.standard_deviation_binning(data, params['n_std'])
    else:
        raise ValueError(f"Thu·∫≠t to√°n {algorithm_name} kh√¥ng ƒë∆∞·ª£c h·ªó tr·ª£")
    
    return discretized

if __name__ == "__main__":
    main()
